/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnBorrowTool } from '../fn/tool/approve-return-borrow-tool';
import { ApproveReturnBorrowTool$Params } from '../fn/tool/approve-return-borrow-tool';
import { borrowTool } from '../fn/tool/borrow-tool';
import { BorrowTool$Params } from '../fn/tool/borrow-tool';
import { findAllBorrowedTools } from '../fn/tool/find-all-borrowed-tools';
import { FindAllBorrowedTools$Params } from '../fn/tool/find-all-borrowed-tools';
import { findAllReturnedTools } from '../fn/tool/find-all-returned-tools';
import { FindAllReturnedTools$Params } from '../fn/tool/find-all-returned-tools';
import { findAllTools } from '../fn/tool/find-all-tools';
import { FindAllTools$Params } from '../fn/tool/find-all-tools';
import { findAllToolsByOwner } from '../fn/tool/find-all-tools-by-owner';
import { FindAllToolsByOwner$Params } from '../fn/tool/find-all-tools-by-owner';
import { findToolById } from '../fn/tool/find-tool-by-id';
import { FindToolById$Params } from '../fn/tool/find-tool-by-id';
import { PageResponseBorrowedToolResponse } from '../models/page-response-borrowed-tool-response';
import { PageResponseToolResponse } from '../models/page-response-tool-response';
import { returnBorrowTool } from '../fn/tool/return-borrow-tool';
import { ReturnBorrowTool$Params } from '../fn/tool/return-borrow-tool';
import { saveTool } from '../fn/tool/save-tool';
import { SaveTool$Params } from '../fn/tool/save-tool';
import { ToolResponse } from '../models/tool-response';
import { updateArchivedStatus } from '../fn/tool/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/tool/update-archived-status';
import { updateAvailableStatus } from '../fn/tool/update-shareable-status';
import { UpdateAvailableStatus$Params } from '../fn/tool/update-shareable-status';
import { uploadToolCoverPicture } from '../fn/tool/upload-tool-cover-picture';
import { UploadToolCoverPicture$Params } from '../fn/tool/upload-tool-cover-picture';

@Injectable()
export class ToolService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllTools()` */
  static readonly FindAllToolsPath = '/tools';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTools$Response(
    params?: FindAllTools$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseToolResponse>> {
    return findAllTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTools(
    params?: FindAllTools$Params,
    context?: HttpContext
  ): Observable<PageResponseToolResponse> {
    return this.findAllTools$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseToolResponse>
        ): PageResponseToolResponse => r.body
      )
    );
  }

  /** Path part for operation `saveTool()` */
  static readonly SaveToolPath = '/tools';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveTool()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTool$Response(
    params: SaveTool$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return saveTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveTool$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTool(params: SaveTool$Params, context?: HttpContext): Observable<number> {
    return this.saveTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadToolCoverPicture()` */
  static readonly UploadToolCoverPicturePath = '/tools/cover/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadToolCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadToolCoverPicture$Response(
    params: UploadToolCoverPicture$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<{}>> {
    return uploadToolCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadToolCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadToolCoverPicture(
    params: UploadToolCoverPicture$Params,
    context?: HttpContext
  ): Observable<{}> {
    return this.uploadToolCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body)
    );
  }

  /** Path part for operation `borrowTool()` */
  static readonly BorrowToolPath = '/tools/borrow/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowTool$Response(
    params: BorrowTool$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return borrowTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowTool(
    params: BorrowTool$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.borrowTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateAvailableStatusPath = '/tools/available/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAvailableStatus$Response(
    params: UpdateAvailableStatus$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return updateAvailableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAvailableStatus(
    params: UpdateAvailableStatus$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.updateAvailableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowTool()` */
  static readonly ReturnBorrowToolPath = '/tools/borrow/return/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowTool$Response(
    params: ReturnBorrowTool$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return returnBorrowTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowTool(
    params: ReturnBorrowTool$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.returnBorrowTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnBorrowTool()` */
  static readonly ApproveReturnBorrowToolPath =
    '/tools/borrow/return/approve/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnBorrowTool()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowTool$Response(
    params: ApproveReturnBorrowTool$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return approveReturnBorrowTool(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnBorrowTool$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowTool(
    params: ApproveReturnBorrowTool$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.approveReturnBorrowTool$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/tools/archived/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(
    params: UpdateArchivedStatus$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(
    params: UpdateArchivedStatus$Params,
    context?: HttpContext
  ): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findToolById()` */
  static readonly FindToolByIdPath = '/tools/{tool-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findToolById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findToolById$Response(
    params: FindToolById$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<ToolResponse>> {
    return findToolById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findToolById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findToolById(
    params: FindToolById$Params,
    context?: HttpContext
  ): Observable<ToolResponse> {
    return this.findToolById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ToolResponse>): ToolResponse => r.body)
    );
  }

  /** Path part for operation `findToolByName()` */
  static readonly FindToolByNamePath = '/tools/name/{tool-name}';

  /**
   * Get a tool by its name.
   * This method provides access to the full `HttpResponse`.
   */
  findToolByName$Response(
    params: { toolName: string },
    context?: HttpContext
  ): Observable<StrictHttpResponse<ToolResponse>> {
    const path = ToolService.FindToolByNamePath.replace(
      '{tool-name}',
      encodeURIComponent(params.toolName)
    );
    const url = `${this.rootUrl}${path}`;

    return this.http.get<ToolResponse>(url, {
      observe: 'response',
      context,
    }) as Observable<StrictHttpResponse<ToolResponse>>;
  }

  /**
 * Get only the response body (convenience method).
 */
findToolByName(params: { toolName: string }, context?: HttpContext): Observable<ToolResponse> {
  return this.findToolByName$Response(params, context).pipe(
    map(r => r.body as ToolResponse)
  );
}

  /** Path part for operation `findAllReturnedTools()` */
  static readonly FindAllReturnedToolsPath = '/tools/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedTools$Response(
    params?: FindAllReturnedTools$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBorrowedToolResponse>> {
    return findAllReturnedTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedTools(
    params?: FindAllReturnedTools$Params,
    context?: HttpContext
  ): Observable<PageResponseBorrowedToolResponse> {
    return this.findAllReturnedTools$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBorrowedToolResponse>
        ): PageResponseBorrowedToolResponse => r.body
      )
    );
  }

  /** Path part for operation `findAllToolsByOwner()` */
  static readonly FindAllToolsByOwnerPath = '/tools/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllToolsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllToolsByOwner$Response(
    params?: FindAllToolsByOwner$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseToolResponse>> {
    return findAllToolsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllToolsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllToolsByOwner(
    params?: FindAllToolsByOwner$Params,
    context?: HttpContext
  ): Observable<PageResponseToolResponse> {
    return this.findAllToolsByOwner$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseToolResponse>
        ): PageResponseToolResponse => r.body
      )
    );
  }

  /** Path part for operation `findAllBorrowedTools()` */
  static readonly FindAllBorrowedToolsPath = '/tools/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedTools()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedTools$Response(
    params?: FindAllBorrowedTools$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<PageResponseBorrowedToolResponse>> {
    return findAllBorrowedTools(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedTools$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedTools(
    params?: FindAllBorrowedTools$Params,
    context?: HttpContext
  ): Observable<PageResponseBorrowedToolResponse> {
    return this.findAllBorrowedTools$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<PageResponseBorrowedToolResponse>
        ): PageResponseBorrowedToolResponse => r.body
      )
    );
  }
}
